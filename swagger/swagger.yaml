consumes:
    - application/json
definitions:
    Category:
        properties:
            instances:
                items:
                    $ref: '#/definitions/PublicInstance'
                type: array
                x-go-name: Instances
            label:
                type: string
                x-go-name: Label
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    Cluster:
        description: Cluster domain object defining a cluster
        properties:
            autoscaled:
                type: boolean
                x-go-name: Autoscaled
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            description:
                type: string
                x-go-name: Description
            groups:
                items:
                    $ref: '#/definitions/Group'
                type: array
                x-go-name: Groups
            id:
                format: uint64
                type: integer
                x-go-name: ID
            name:
                type: string
                x-go-name: Name
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
        required:
            - id
            - createdAt
            - updatedAt
            - name
            - description
            - autoscaled
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    ClusterResources:
        properties:
            Autoscaled:
                type: boolean
            CPU:
                type: string
            Memory:
                type: string
            Nodes:
                format: int64
                type: integer
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    CopyDatabaseRequest:
        properties:
            group:
                type: string
                x-go-name: Group
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    CreateClusterRequest:
        properties:
            KubernetesConfiguration:
                $ref: '#/definitions/FileHeader'
            description:
                type: string
                x-go-name: Description
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/cluster
    CreateExternalDatabaseRequest:
        properties:
            expiration:
                description: Expiration time in seconds
                format: uint64
                type: integer
                x-go-name: Expiration
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    CreateGroupRequest:
        properties:
            deployable:
                type: boolean
                x-go-name: Deployable
            description:
                type: string
                x-go-name: Description
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
            namespace:
                type: string
                x-go-name: Namespace
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/group
    Database:
        properties:
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            externalDownloads:
                items:
                    $ref: '#/definitions/ExternalDownload'
                type: array
                x-go-name: ExternalDownloads
            filestore:
                $ref: '#/definitions/Database'
            filestoreId:
                format: uint64
                type: integer
                x-go-name: FilestoreID
            groupName:
                type: string
                x-go-name: GroupName
            id:
                format: uint64
                type: integer
                x-go-name: ID
            lock:
                $ref: '#/definitions/Lock'
            name:
                type: string
                x-go-name: Name
            slug:
                type: string
                x-go-name: Slug
            type:
                type: string
                x-go-name: Type
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            url:
                type: string
                x-go-name: Url
            user:
                $ref: '#/definitions/User'
            userId:
                format: uint64
                type: integer
                x-go-name: UserID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    Deployment:
        properties:
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            description:
                type: string
                x-go-name: Description
            group:
                $ref: '#/definitions/Group'
            groupName:
                type: string
                x-go-name: GroupName
            id:
                format: uint64
                type: integer
                x-go-name: ID
            instances:
                items:
                    $ref: '#/definitions/DeploymentInstance'
                type: array
                x-go-name: Instances
            name:
                type: string
                x-go-name: Name
            ttl:
                format: uint64
                type: integer
                x-go-name: TTL
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            user:
                $ref: '#/definitions/User'
            userId:
                format: uint64
                type: integer
                x-go-name: UserID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    DeploymentInstance:
        properties:
            Lock:
                $ref: '#/definitions/Lock'
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            deployLog:
                type: string
                x-go-name: DeployLog
            deployment:
                $ref: '#/definitions/Deployment'
            deploymentId:
                format: uint64
                type: integer
                x-go-name: DeploymentID
            group:
                $ref: '#/definitions/Group'
            groupName:
                type: string
                x-go-name: GroupName
            id:
                format: uint64
                type: integer
                x-go-name: ID
            name:
                description: 'TODO: FK to name of Deployment?'
                type: string
                x-go-name: Name
            parameters:
                $ref: '#/definitions/DeploymentInstanceParameters'
            public:
                type: boolean
                x-go-name: Public
            stackName:
                description: Stack     *Stack `json:"stack,omitempty"`
                type: string
                x-go-name: StackName
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    DeploymentInstanceParameter:
        properties:
            value:
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    DeploymentInstanceParameters:
        additionalProperties:
            $ref: '#/definitions/DeploymentInstanceParameter'
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    Event:
        properties:
            Data: {}
            Event:
                type: string
            Id:
                type: string
            Retry:
                format: uint64
                type: integer
        type: object
        x-go-package: github.com/gin-contrib/sse
    ExternalDownload:
        properties:
            databaseId:
                format: uint64
                type: integer
                x-go-name: DatabaseID
            expiration:
                format: uint64
                type: integer
                x-go-name: Expiration
            uuid:
                format: uuid
                type: string
                x-go-name: UUID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    FileHeader:
        properties:
            Filename:
                type: string
            Header:
                $ref: '#/definitions/MIMEHeader'
            Size:
                format: int64
                type: integer
        title: A FileHeader describes a file part of a multipart request.
        type: object
        x-go-package: mime/multipart
    Group:
        description: Group domain object defining a group
        properties:
            adminUsers:
                items:
                    $ref: '#/definitions/User'
                type: array
                x-go-name: AdminUsers
            cluster:
                $ref: '#/definitions/Cluster'
            clusterId:
                format: uint64
                type: integer
                x-go-name: ClusterID
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            deployable:
                type: boolean
                x-go-name: Deployable
            description:
                type: string
                x-go-name: Description
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
            namespace:
                type: string
                x-go-name: Namespace
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            users:
                items:
                    $ref: '#/definitions/User'
                type: array
                x-go-name: Users
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    GroupWithDeployments:
        properties:
            deployments:
                items:
                    $ref: '#/definitions/Deployment'
                type: array
                x-go-name: Deployments
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    GroupWithPublicInstances:
        properties:
            categories:
                items:
                    $ref: '#/definitions/Category'
                type: array
                x-go-name: Categories
            description:
                type: string
                x-go-name: Description
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    GroupsWithDatabases:
        properties:
            databases:
                items:
                    $ref: '#/definitions/Database'
                type: array
                x-go-name: Databases
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    InstanceStatus:
        type: string
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    Lock:
        properties:
            databaseId:
                format: uint64
                type: integer
                x-go-name: DatabaseID
            instance:
                $ref: '#/definitions/DeploymentInstance'
            instanceId:
                format: uint64
                type: integer
                x-go-name: InstanceID
            user:
                $ref: '#/definitions/User'
            userId:
                format: uint64
                type: integer
                x-go-name: UserID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    LockDatabaseRequest:
        properties:
            instanceId:
                format: uint64
                type: integer
                x-go-name: InstanceId
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    MIMEHeader:
        additionalProperties:
            items:
                type: string
            type: array
        description: |-
            A MIMEHeader represents a MIME-style header mapping
            keys to sets of values.
        type: object
        x-go-package: net/textproto
    PublicInstance:
        properties:
            description:
                type: string
                x-go-name: Description
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    RefreshTokenRequest:
        properties:
            refreshToken:
                type: string
                x-go-name: RefreshToken
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    Request:
        properties:
            key:
                type: string
                x-go-name: Key
            payload:
                x-go-name: Payload
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/integration
    RequestPasswordResetRequest:
        properties:
            email:
                type: string
                x-go-name: Email
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    ResetPasswordRequest:
        properties:
            password:
                type: string
                x-go-name: Password
            token:
                type: string
                x-go-name: Token
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    Response:
        description: Response depends on the input and can be either a list or a map
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/integration
    SaveDeploymentRequest:
        properties:
            description:
                type: string
                x-go-name: Description
            group:
                type: string
                x-go-name: Group
            name:
                type: string
                x-go-name: Name
            ttl:
                format: uint64
                type: integer
                x-go-name: TTL
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    SaveInstanceRequest:
        properties:
            parameters:
                $ref: '#/definitions/parameters'
            public:
                type: boolean
                x-go-name: Public
            stackName:
                type: string
                x-go-name: StackName
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    Stack:
        properties:
            name:
                type: string
                x-go-name: Name
            parameters:
                items:
                    $ref: '#/definitions/StackParameter'
                type: array
                x-go-name: Parameters
            requires:
                items:
                    $ref: '#/definitions/Stack'
                type: array
                x-go-name: Requires
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/stack
    StackParameter:
        properties:
            consumed:
                type: boolean
                x-go-name: Consumed
            defaultValue:
                type: string
                x-go-name: DefaultValue
            displayName:
                type: string
                x-go-name: DisplayName
            parameterName:
                type: string
                x-go-name: ParameterName
            priority:
                format: uint64
                type: integer
                x-go-name: Priority
            sensitive:
                type: boolean
                x-go-name: Sensitive
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/stack
    UpdateClusterRequest:
        properties:
            KubernetesConfiguration:
                $ref: '#/definitions/FileHeader'
            description:
                type: string
                x-go-name: Description
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/cluster
    UpdateDatabaseRequest:
        properties:
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    UpdateDeploymentRequest:
        properties:
            description:
                type: string
                x-go-name: Description
            ttl:
                format: uint64
                type: integer
                x-go-name: TTL
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    User:
        description: User domain object defining a user
        properties:
            adminGroups:
                items:
                    $ref: '#/definitions/Group'
                type: array
                x-go-name: AdminGroups
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            databases:
                items:
                    $ref: '#/definitions/Database'
                type: array
                x-go-name: Databases
            email:
                type: string
                x-go-name: Email
            groups:
                items:
                    $ref: '#/definitions/Group'
                type: array
                x-go-name: Groups
            id:
                format: uint64
                type: integer
                x-go-name: ID
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            validated:
                type: boolean
                x-go-name: Validated
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    parameter:
        properties:
            value:
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    parameters:
        additionalProperties:
            $ref: '#/definitions/parameter'
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    saveAsRequest:
        properties:
            format:
                description: Database dump format. Currently plain and custom are support, please see https://www.postgresql.org/docs/current/app-pgdump.html
                type: string
                x-go-name: Format
            name:
                description: Name of the new database
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    signUpRequest:
        properties:
            email:
                type: string
                x-go-name: Email
            password:
                type: string
                x-go-name: Password
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    updateUserRequest:
        properties:
            email:
                type: string
                x-go-name: Email
            password:
                type: string
                x-go-name: Password
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    validateEmailRequest:
        properties:
            token:
                type: string
                x-go-name: Token
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
info:
    contact:
        email: info@dhis2.org
        url: https://github.com/dhis2-sre/im-manager
    description: Instance Manager
    license:
        name: TODO
    title: Instance Manager
    version: 0.1.0
paths:
    /clusters:
        get:
            description: Find all clusters...
            operationId: findAllClusters
            responses:
                "200":
                    $ref: '#/responses/Clusters'
                "401":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find all clusters
        post:
            description: Save a cluster...
            operationId: clusterCreate
            parameters:
                - description: The cluster creation request
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CreateClusterRequest'
            responses:
                "201":
                    description: Cluster
                    schema:
                        $ref: '#/definitions/Cluster'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Save cluster
    /clusters/{id}:
        delete:
            description: Delete a cluster...
            operationId: clusterDelete
            parameters:
                - description: The cluster ID
                  format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "204":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete cluster
        get:
            description: Find a cluster by its id
            operationId: findClusterById
            parameters:
                - description: The cluster ID
                  format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: Cluster
                    schema:
                        $ref: '#/definitions/Cluster'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find cluster
        put:
            description: Update a cluster...
            operationId: clusterUpdate
            parameters:
                - description: The cluster ID
                  format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: The cluster update request
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/UpdateClusterRequest'
            responses:
                "200":
                    description: Cluster
                    schema:
                        $ref: '#/definitions/Cluster'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update cluster
    /databases:
        get:
            description: List databases...
            operationId: listDatabases
            responses:
                "200":
                    $ref: '#/responses/GroupsWithDatabases'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: List databases
        put:
            description: Upload database...
            operationId: uploadDatabase
            parameters:
                - description: Required custom header representing the name of the file
                  in: header
                  name: X-Upload-Name
                  required: true
                  type: string
                  x-go-name: Name
                - description: Required custom header representing the group name
                  in: header
                  name: X-Upload-Group
                  required: true
                  type: string
                  x-go-name: Group
                - description: The file content
                  in: body
                  name: Body
                  required: true
                  schema:
                    items:
                        format: uint8
                        type: integer
                    type: array
            responses:
                "201":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Upload database
    /databases/{id}:
        delete:
            description: Delete database by id...
            operationId: deleteDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete database
        get:
            description: Find a database by its identifier. The identifier could be either the actual id of the database or the slug associated with it
            operationId: findDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/Database'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find database
        put:
            description: |-
                Update database by id
                TODO: Race condition? If two clients request at the same time... Do we need a transaction between find and update
            operationId: updateDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/UpdateDatabaseRequest'
            responses:
                "200":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update database
    /databases/{id}/copy:
        post:
            description: Copy database...
            operationId: copyDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Copy database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CopyDatabaseRequest'
            responses:
                "202":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Copy database
    /databases/{id}/download:
        get:
            description: Download a database by its identifier. The identifier could be either the actual id of the database or the slug associated with it
            operationId: downloadDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/DownloadDatabaseResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Download database
    /databases/{id}/external:
        post:
            description: Create link so the database can be downloaded without log in
            operationId: createExternalDownloadDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Create external database download
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CreateExternalDatabaseRequest'
            responses:
                "200":
                    $ref: '#/responses/CreateExternalDownloadResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: External download link
    /databases/{id}/lock:
        delete:
            description: Unlock database by id
            operationId: unlockDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Lock/unlock database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/LockDatabaseRequest'
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Unlock database
        post:
            description: Lock database by id...
            operationId: lockDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Lock/unlock database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/LockDatabaseRequest'
            responses:
                "200":
                    $ref: '#/responses/Lock'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "409":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Lock database
    /databases/external/{uuid}:
        get:
            description: Download a given database without authentication
            operationId: externalDownloadDatabase
            parameters:
                - format: uint64
                  in: path
                  name: uuid
                  required: true
                  type: integer
                  x-go-name: UUID
            responses:
                "200":
                    $ref: '#/responses/DownloadDatabaseResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Externally download database
    /databases/save-as/{instanceId}:
        post:
            description: Save database under a new name
            operationId: saveAsDatabase
            parameters:
                - format: uint64
                  in: path
                  name: instanceId
                  required: true
                  type: integer
                  x-go-name: InstanceID
                - description: SaveAs database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/saveAsRequest'
            responses:
                "201":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: '"Save as" database'
    /databases/save/{instanceId}:
        post:
            description: Saving a database won't affect the instances running the database. However, it should be noted that if two unlocked databases are deployed from the same database they can both overwrite it. It's up to the users to ensure this doesn't happen accidentally.
            operationId: saveDatabase
            parameters:
                - format: uint64
                  in: path
                  name: instanceId
                  required: true
                  type: integer
                  x-go-name: InstanceID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Save database
    /deployments:
        get:
            description: Find all deployments accessible by the user
            operationId: listDeployments
            responses:
                "200":
                    $ref: '#/responses/GroupsWithDeployments'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find deployments
        post:
            description: Save a deployment...
            operationId: saveDeployment
            parameters:
                - description: Save deployment request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema:
                    $ref: '#/definitions/SaveDeploymentRequest'
            responses:
                "200":
                    description: Deployment
                    schema:
                        $ref: '#/definitions/Deployment'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Save a deployment
    /deployments/{id}:
        delete:
            description: Delete an deployment by id
            operationId: deleteDeployment
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete deployment
        get:
            description: Find a deployment by id
            operationId: findDeploymentById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: Deployment
                    schema:
                        $ref: '#/definitions/Deployment'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find a deployment
        put:
            description: Update a Deployment ...
            operationId: updateDeployment
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update deployment request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema:
                    $ref: '#/definitions/UpdateDeploymentRequest'
            responses:
                "200":
                    description: Deployment
                    schema:
                        $ref: '#/definitions/Deployment'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "500":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update a Deployment
    /deployments/{id}/deploy:
        post:
            description: Deploy a deployment...
            operationId: deployDeployment
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/DeploymentInstance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Deploy a deployment
    /deployments/{id}/instance:
        post:
            description: Save an instance...
            operationId: saveInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Save instance request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema:
                    $ref: '#/definitions/SaveInstanceRequest'
            responses:
                "200":
                    $ref: '#/responses/DeploymentInstance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Save an instance
    /deployments/{id}/instance/{instanceId}:
        delete:
            description: Delete a deployment instance by id
            operationId: deleteDeploymentInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - format: uint64
                  in: path
                  name: instanceId
                  required: true
                  type: integer
                  x-go-name: InstanceID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete deployment instance
        put:
            description: Update a Deployment Instance ...
            operationId: updateInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - format: uint64
                  in: path
                  name: instanceId
                  required: true
                  type: integer
                  x-go-name: InstanceID
                - description: Update instance request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema:
                    $ref: '#/definitions/SaveInstanceRequest'
            responses:
                "200":
                    $ref: '#/responses/DeploymentInstance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update a Deployment Instance
    /deployments/public:
        get:
            description: Find all public deployments
            operationId: findPublicInstances
            responses:
                "200":
                    $ref: '#/responses/GroupsWithPublicInstances'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: Find public deployments
    /events:
        get:
            description: Stream events...
            operationId: streamSSE
            responses:
                "200":
                    $ref: '#/responses/Stream'
                "400":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Stream events
    /groups:
        get:
            description: Find all groups by user
            operationId: findAllGroupsByUser
            parameters:
                - description: deployable
                  in: query
                  name: deployable
                  type: string
                  x-go-name: Deployable
            responses:
                "200":
                    description: Group
                    schema:
                        items:
                            $ref: '#/definitions/Group'
                        type: array
                "401":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find all groups
        post:
            description: Create a group...
            operationId: groupCreate
            parameters:
                - description: Create group request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CreateGroupRequest'
            responses:
                "201":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Create group
    /groups/{group}/clusters/{clusterId}:
        delete:
            description: Remove a cluster from a group...
            operationId: removeClusterFromGroup
            parameters:
                - in: path
                  name: group
                  required: true
                  type: string
                  x-go-name: Group
                - in: path
                  name: clusterId
                  required: true
                  type: string
                  x-go-name: ClusterId
            responses:
                "204":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Remove cluster from group
        post:
            description: Add a cluster to a group...
            operationId: addClusterToGroup
            parameters:
                - in: path
                  name: group
                  required: true
                  type: string
                  x-go-name: Group
                - in: path
                  name: clusterId
                  required: true
                  type: string
                  x-go-name: ClusterId
            responses:
                "201":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Add cluster to group
    /groups/{group}/users/{userId}:
        delete:
            description: Remove a user from a group...
            operationId: removeUserFromGroup
            parameters:
                - in: path
                  name: group
                  required: true
                  type: string
                  x-go-name: Group
                - format: uint64
                  in: path
                  name: userId
                  required: true
                  type: integer
                  x-go-name: UserID
            responses:
                "204":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Remove user from group
        post:
            description: Add a user to a group...
            operationId: addUserToGroup
            parameters:
                - in: path
                  name: group
                  required: true
                  type: string
                  x-go-name: Group
                - format: uint64
                  in: path
                  name: userId
                  required: true
                  type: integer
                  x-go-name: UserID
            responses:
                "201":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Add user to group
    /groups/{name}:
        get:
            description: Find a group by its name
            operationId: findGroupByName
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find group
    /groups/{name}/details:
        get:
            description: Find a group by its name with details
            operationId: findGroupByNameWithDetails
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find group with details
    /groups/{name}/resources:
        get:
            description: Find group resources by group name
            operationId: findResources
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    $ref: '#/responses/ClusterResources'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find group resources
    /health:
        get:
            description: Show service health status
            operationId: health
            responses:
                "200":
                    $ref: '#/responses/Response'
            summary: Health status
    /instances/{id}/details:
        put:
            description: Returns the details of an instance including parameters
            operationId: instanceWithDetails
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Instance with details
    /instances/{id}/logs:
        get:
            description: Stream instance logs in real time
            operationId: instanceLogs
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: selector
                  in: query
                  name: selector
                  type: string
                  x-go-name: Selector
            responses:
                "200":
                    $ref: '#/responses/InstanceLogsResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Stream logs
    /instances/{id}/pause:
        put:
            description: |-
                Pause an instance. Pause can be called multiple times even on an already paused instance
                (idempotent).
            operationId: pauseInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Pause instance
    /instances/{id}/reset:
        put:
            description: Resetting an instance will completely destroy it and redeploy using the same parameters
            operationId: resetInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Reset instance
    /instances/{id}/restart:
        put:
            description: Restart an instance...
            operationId: restartInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: selector
                  in: query
                  name: selector
                  type: string
                  x-go-name: Selector
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Restart instance
    /instances/{id}/resume:
        put:
            description: |-
                Resume a paused instance. Resume can be called multiple times even on an already running
                instance (idempotent).
            operationId: resumeInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Resume paused instance
    /instances/{id}/status:
        get:
            description: Get instance status...
            operationId: status
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/Status'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "409":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Get instance status
    /integrations:
        post:
            description: Return integration for a given key
            operationId: postIntegration
            parameters:
                - description: Integration request body
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/Request'
            responses:
                "200":
                    $ref: '#/responses/Response'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Integration
    /integrations/image-exists/{repository}/{tag}:
        get:
            description: Assert if docker image exists...
            operationId: imageExists
            parameters:
                - in: path
                  name: repository
                  required: true
                  type: string
                  x-go-name: Repository
                - format: uint64
                  in: path
                  name: tag
                  required: true
                  type: integer
                  x-go-name: Tag
            responses:
                "200":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Assert if docker image exists
    /me:
        get:
            description: Current user details
            operationId: me
            responses:
                "200":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: User details
    /refresh:
        post:
            description: Refresh user tokens
            operationId: refreshToken
            parameters:
                - description: Refresh token request body parameter. Note that this is optional and the refresh token can also be supplied using a cookie named "refreshToken"
                  in: body
                  name: Body
                  schema:
                    $ref: '#/definitions/RefreshTokenRequest'
            responses:
                "201":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: Refresh tokens
    /stacks:
        get:
            description: Find all stacks...
            operationId: stacks
            responses:
                "200":
                    $ref: '#/responses/Stacks'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find all stacks
    /stacks/{name}:
        get:
            description: Find stack by name
            operationId: stack
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    $ref: '#/responses/Stack'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find stack
    /tokens:
        post:
            description: Sign in... And get tokens
            operationId: signIn
            responses:
                "201":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - basicAuth: []
            summary: Sign in
    /users:
        delete:
            description: Sign out user... The authentication is done using oauth and JWT. A JWT can't easily be invalidated so even after calling this endpoint a user can still sign in assuming the JWT isn't expired. However, the token can't be refreshed using the refresh token supplied upon signin
            operationId: signOut
            responses:
                "200":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: Sign out
        get:
            description: Find all users with the groups they belong to
            operationId: findAllUsers
            responses:
                "200":
                    $ref: '#/responses/UsersResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find users
        post:
            description: Sign up a user. This endpoint is publicly accessible and therefore anyone can sign up. However, before being able to perform any actions, users needs to be a member of a group. And only administrators can add users to groups.
            operationId: signUp
            parameters:
                - description: SignUp request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/signUpRequest'
            responses:
                "201":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "400":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: SignUp user
    /users/{id}:
        delete:
            description: Delete user by id
            operationId: deleteUser
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete user
        get:
            description: Find a user by its id
            operationId: findUserById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find user
        put:
            description: Update user's email and/or password
            operationId: updateUser
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update user request
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/updateUserRequest'
            responses:
                "200":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update user
    /users/request-reset:
        post:
            description: Request user's password reset
            operationId: requestPasswordReset
            parameters:
                - description: Request password reset request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/RequestPasswordResetRequest'
            responses:
                "201":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: Request password reset
    /users/reset-password:
        post:
            description: Reset user's password
            operationId: resetPassword
            parameters:
                - description: Reset password request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/ResetPasswordRequest'
            responses:
                "201":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: Reset password
    /users/validate:
        post:
            description: Validate users email
            operationId: validateEmail
            parameters:
                - description: Email validation token request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/validateEmailRequest'
            responses:
                "200":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            summary: Validate email
produces:
    - application/json
responses:
    ClusterResources:
        description: ""
        schema:
            $ref: '#/definitions/ClusterResources'
    Clusters:
        description: ""
        schema:
            items:
                $ref: '#/definitions/Cluster'
            type: array
    CreateExternalDownloadResponse:
        description: ""
        schema:
            $ref: '#/definitions/ExternalDownload'
    Database:
        description: ""
        schema:
            $ref: '#/definitions/Database'
    DeploymentInstance:
        description: ""
        schema:
            $ref: '#/definitions/DeploymentInstance'
    DownloadDatabaseResponse:
        description: ""
        schema:
            items:
                format: uint8
                type: integer
            type: array
    Error:
        description: ""
    GroupsWithDatabases:
        description: ""
        schema:
            $ref: '#/definitions/GroupsWithDatabases'
    GroupsWithDeployments:
        description: ""
        schema:
            items:
                $ref: '#/definitions/GroupWithDeployments'
            type: array
    GroupsWithPublicInstances:
        description: ""
        schema:
            items:
                $ref: '#/definitions/GroupWithPublicInstances'
            type: array
    InstanceLogsResponse:
        description: ""
    Lock:
        description: ""
        schema:
            $ref: '#/definitions/Lock'
    Response:
        description: ""
        schema:
            $ref: '#/definitions/Response'
    Stack:
        description: ""
        schema:
            $ref: '#/definitions/Stack'
    Stacks:
        description: ""
        schema:
            items:
                $ref: '#/definitions/Stack'
            type: array
    Status:
        description: ""
        schema:
            $ref: '#/definitions/InstanceStatus'
    Stream:
        description: ""
        schema:
            $ref: '#/definitions/Event'
    UsersResponse:
        description: ""
        schema:
            items:
                $ref: '#/definitions/User'
            type: array
securityDefinitions:
    oauth2:
        flow: password
        tokenUrl: /tokens
        type: oauth2
swagger: "2.0"
