consumes:
    - application/json
definitions:
    Instance:
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    Stack:
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
info:
    contact:
        email: info@dhis2.org
        url: https://github.com/dhis2-sre/im-manager
    description: Manager Service is part of the Instance Manager environment
    license:
        name: TODO
    title: Instance Manager Manager Service.
    version: 0.1.0
paths:
    /health:
        get:
            description: Show service health status
            operationId: health
            responses:
                "200":
                    $ref: '#/responses/Response'
            summary: Health status
    /instances:
        get:
            description: List all instances accessible by the user
            operationId: listInstances
            responses:
                "200":
                    $ref: '#/responses/GroupWithInstances'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: List instances
        post:
            description: Deploy an instance...
            operationId: deployInstance
            parameters:
                - description: Deploy instance request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema: {}
                - description: preset
                  in: query
                  name: preset
                  type: string
                  x-go-name: Preset
            responses:
                "201":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Deploy instance
    /instances-name-to-id/{groupName}/{instanceName}:
        get:
            description: Find instance id by name and group name
            operationId: instanceNameToId
            parameters:
                - in: path
                  name: groupName
                  required: true
                  type: string
                  x-go-name: GroupName
                - in: path
                  name: instanceName
                  required: true
                  type: string
                  x-go-name: InstanceName
            responses:
                "200":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find an instance
    /instances/{id}:
        delete:
            description: Delete an instance by id
            operationId: deleteInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete instance
        get:
            description: Find an instance by id
            operationId: findById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find instance
        put:
            description: Update an instance...
            operationId: updateInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update instance request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema: {}
            responses:
                "204":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update instance
    /instances/{id}/logs:
        get:
            description: Stream instance logs in real time
            operationId: instanceLogs
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: selector
                  in: query
                  name: selector
                  type: string
                  x-go-name: Selector
            responses:
                "200":
                    $ref: '#/responses/InstanceLogsResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Stream logs
    /instances/{id}/parameters:
        get:
            description: Find instance by id with decrypted parameters
            operationId: findByIdDecrypted
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find decrypted instance
    /instances/{id}/pause:
        put:
            description: Pause an instance...
            operationId: pauseInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Pause instance
    /instances/{id}/restart:
        put:
            description: Restart an instance...
            operationId: restartInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: selector
                  in: query
                  name: selector
                  type: string
                  x-go-name: Selector
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Restart instance
    /integrations:
        post:
            description: Return integration for a given key
            operationId: postIntegration
            responses:
                "200":
                    $ref: '#/responses/Any'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Integration
    /presets:
        get:
            description: List all presets accessible by the user
            operationId: listPresets
            responses:
                "200":
                    $ref: '#/responses/GroupWithInstances'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: List presets
    /stacks:
        get:
            description: Find all stacks...
            operationId: stacks
            responses:
                "200":
                    $ref: '#/responses/StacksResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find all stacks
    /stacks/{name}:
        get:
            description: Find stack by name
            operationId: stack
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    $ref: '#/responses/StackResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find stack
produces:
    - application/json
responses:
    Any:
        description: ""
    Error:
        description: ""
    GroupWithInstances:
        description: ""
        schema:
            items: {}
            type: array
    InstanceLogsResponse:
        description: ""
    Response:
        description: ""
    StackResponse:
        description: ""
    StacksResponse:
        description: ""
        schema:
            items: {}
            type: array
securityDefinitions:
    oauth2:
        flow: password
        tokenUrl: /not-valid--endpoint-is-served-from-the-im-user-service
        type: oauth2
swagger: "2.0"
