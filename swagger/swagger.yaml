consumes:
    - application/json
definitions:
    ClusterConfiguration:
        properties:
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            groupName:
                type: string
                x-go-name: GroupName
            id:
                format: uint64
                type: integer
                x-go-name: ID
            kubernetesConfiguration:
                items:
                    format: uint8
                    type: integer
                type: array
                x-go-name: KubernetesConfiguration
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    CopyDatabaseRequest:
        properties:
            group:
                type: string
                x-go-name: Group
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    CreateExternalDatabaseRequest:
        properties:
            expiration:
                description: Expiration time in seconds
                format: uint64
                type: integer
                x-go-name: Expiration
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    CreateGroupRequest:
        properties:
            deployable:
                type: boolean
                x-go-name: Deployable
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/group
    Database:
        properties:
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            externalDownloads:
                items:
                    $ref: '#/definitions/ExternalDownload'
                type: array
                x-go-name: ExternalDownloads
            groupName:
                type: string
                x-go-name: GroupName
            id:
                format: uint64
                type: integer
                x-go-name: ID
            lock:
                $ref: '#/definitions/Lock'
            name:
                type: string
                x-go-name: Name
            slug:
                type: string
                x-go-name: Slug
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            url:
                type: string
                x-go-name: Url
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    DeployInstanceRequest:
        properties:
            description:
                type: string
                x-go-name: Description
            groupName:
                type: string
                x-go-name: Group
            name:
                type: string
                x-go-name: Name
            optionalParameters:
                items:
                    $ref: '#/definitions/InstanceOptionalParameter'
                type: array
                x-go-name: OptionalParameters
            presetInstance:
                format: uint64
                type: integer
                x-go-name: PresetInstance
            requiredParameters:
                items:
                    $ref: '#/definitions/InstanceRequiredParameter'
                type: array
                x-go-name: RequiredParameters
            sourceInstance:
                format: uint64
                type: integer
                x-go-name: SourceInstance
            stackName:
                type: string
                x-go-name: Stack
            ttl:
                format: uint64
                type: integer
                x-go-name: TTL
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    ExternalDownload:
        properties:
            databaseId:
                format: uint64
                type: integer
                x-go-name: DatabaseID
            expiration:
                format: uint64
                type: integer
                x-go-name: Expiration
            uuid:
                format: uuid
                type: string
                x-go-name: UUID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    Group:
        description: Group domain object defining a group
        properties:
            clusterConfiguration:
                $ref: '#/definitions/ClusterConfiguration'
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            deployable:
                type: boolean
                x-go-name: Deployable
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            users:
                items:
                    $ref: '#/definitions/User'
                type: array
                x-go-name: Users
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    GroupWithInstances:
        properties:
            hostname:
                type: string
                x-go-name: Hostname
            instances:
                items:
                    $ref: '#/definitions/Instance'
                type: array
                x-go-name: Instances
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    GroupsWithDatabases:
        properties:
            databases:
                items:
                    $ref: '#/definitions/Database'
                type: array
                x-go-name: Databases
            hostname:
                type: string
                x-go-name: Hostname
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    Instance:
        properties:
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            deployLog:
                type: string
                x-go-name: DeployLog
            description:
                type: string
                x-go-name: Description
            groupName:
                type: string
                x-go-name: GroupName
            id:
                format: uint64
                type: integer
                x-go-name: ID
            name:
                type: string
                x-go-name: Name
            optionalParameters:
                items:
                    $ref: '#/definitions/InstanceOptionalParameter'
                type: array
                x-go-name: OptionalParameters
            preset:
                type: boolean
                x-go-name: Preset
            presetId:
                format: uint64
                type: integer
                x-go-name: PresetID
            requiredParameters:
                items:
                    $ref: '#/definitions/InstanceRequiredParameter'
                type: array
                x-go-name: RequiredParameters
            stackName:
                type: string
                x-go-name: StackName
            ttl:
                format: uint64
                type: integer
                x-go-name: TTL
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
            user:
                $ref: '#/definitions/User'
            userId:
                format: uint64
                type: integer
                x-go-name: UserID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    InstanceOptionalParameter:
        properties:
            name:
                description: 'TODO: Rename StackOptionalParameterID to Name'
                type: string
                x-go-name: StackOptionalParameterID
            value:
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    InstanceRequiredParameter:
        properties:
            name:
                description: 'TODO: Rename StackRequiredParameterID to Name'
                type: string
                x-go-name: StackRequiredParameterID
            value:
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    Lock:
        properties:
            databaseId:
                format: uint64
                type: integer
                x-go-name: DatabaseID
            instanceId:
                format: uint64
                type: integer
                x-go-name: InstanceID
            userId:
                format: uint64
                type: integer
                x-go-name: UserID
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    LockDatabaseRequest:
        properties:
            instanceId:
                format: uint64
                type: integer
                x-go-name: InstanceId
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    RefreshTokenRequest:
        properties:
            refreshToken:
                type: string
                x-go-name: RefreshToken
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    Request:
        properties:
            key:
                type: string
                x-go-name: Key
            payload:
                x-go-name: Payload
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/integration
    Response:
        description: Response depends on the input and can be either a list or a map
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/integration
    Stack:
        properties:
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            hostnamePattern:
                type: string
                x-go-name: HostnamePattern
            hostnameVariable:
                type: string
                x-go-name: HostnameVariable
            instances:
                items:
                    $ref: '#/definitions/Instance'
                type: array
                x-go-name: Instances
            name:
                type: string
                x-go-name: Name
            optionalParameters:
                items:
                    $ref: '#/definitions/StackOptionalParameter'
                type: array
                x-go-name: OptionalParameters
            requiredParameters:
                items:
                    $ref: '#/definitions/StackRequiredParameter'
                type: array
                x-go-name: RequiredParameters
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    StackOptionalParameter:
        properties:
            consumed:
                type: boolean
                x-go-name: Consumed
            defaultValue:
                type: string
                x-go-name: DefaultValue
            name:
                type: string
                x-go-name: Name
            stackName:
                type: string
                x-go-name: StackName
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    StackRequiredParameter:
        properties:
            consumed:
                type: boolean
                x-go-name: Consumed
            name:
                type: string
                x-go-name: Name
            stackName:
                type: string
                x-go-name: StackName
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    Tokens:
        description: Tokens domain object defining user tokens
        properties:
            accessToken:
                type: string
                x-go-name: AccessToken
            expiresIn:
                format: uint64
                type: integer
                x-go-name: ExpiresIn
            refreshToken:
                type: string
                x-go-name: RefreshToken
            tokenType:
                type: string
                x-go-name: TokenType
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/token
    UpdateDatabaseRequest:
        properties:
            name:
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    UpdateInstanceRequest:
        properties:
            optionalParameters:
                items:
                    $ref: '#/definitions/InstanceOptionalParameter'
                type: array
                x-go-name: OptionalParameters
            requiredParameters:
                items:
                    $ref: '#/definitions/InstanceRequiredParameter'
                type: array
                x-go-name: RequiredParameters
            ttl:
                format: uint64
                type: integer
                x-go-name: TTL
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/instance
    User:
        description: User domain object defining a user
        properties:
            adminGroups:
                items:
                    $ref: '#/definitions/Group'
                type: array
                x-go-name: AdminGroups
            createdAt:
                format: date-time
                type: string
                x-go-name: CreatedAt
            email:
                type: string
                x-go-name: Email
            groups:
                items:
                    $ref: '#/definitions/Group'
                type: array
                x-go-name: Groups
            id:
                format: uint64
                type: integer
                x-go-name: ID
            updatedAt:
                format: date-time
                type: string
                x-go-name: UpdatedAt
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/model
    saveAsRequest:
        properties:
            format:
                description: Database dump format. Currently plain and custom are support, please see https://www.postgresql.org/docs/current/app-pgdump.html
                type: string
                x-go-name: Format
            name:
                description: Name of the new database
                type: string
                x-go-name: Name
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/database
    signUpRequest:
        properties:
            email:
                type: string
                x-go-name: Email
            password:
                type: string
                x-go-name: Password
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
    updateUserRequest:
        properties:
            email:
                type: string
                x-go-name: Email
            password:
                type: string
                x-go-name: Password
        type: object
        x-go-package: github.com/dhis2-sre/im-manager/pkg/user
info:
    contact:
        email: info@dhis2.org
        url: https://github.com/dhis2-sre/im-manager
    description: Instance Manager
    license:
        name: TODO
    title: Instance Manager
    version: 0.1.0
paths:
    /databases:
        get:
            description: List databases...
            operationId: listDatabases
            responses:
                "200":
                    description: GroupsWithDatabases
                    schema:
                        items:
                            $ref: '#/definitions/GroupsWithDatabases'
                        type: array
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: List databases
        post:
            description: Upload database...
            operationId: uploadDatabase
            parameters:
                - description: Upload database request body parameter
                  in: formData
                  name: Group
                  required: true
                  type: string
                - description: Upload database request body parameter
                  in: formData
                  name: File
                  required: true
                  type: file
            responses:
                "201":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Upload database
    /databases/{id}:
        delete:
            description: Delete database by id...
            operationId: deleteDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete database
        get:
            description: Find a database by its identifier. The identifier could be either the actual id of the database or the slug associated with it
            operationId: findDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/Database'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find database
        put:
            description: |-
                Update database by id
                TODO: Race condition? If two clients request at the same time... Do we need a transaction between find and update
            operationId: updateDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/UpdateDatabaseRequest'
            responses:
                "200":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update database
    /databases/{id}/copy:
        post:
            description: Copy database...
            operationId: copyDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Copy database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CopyDatabaseRequest'
            responses:
                "202":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Copy database
    /databases/{id}/download:
        get:
            description: Download a database by its identifier. The identifier could be either the actual id of the database or the slug associated with it
            operationId: downloadDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    $ref: '#/responses/DownloadDatabaseResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Download database
    /databases/{id}/external:
        post:
            description: Create link so the database can be downloaded without log in
            operationId: createExternalDownloadDatabase
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Create external database download
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CreateExternalDatabaseRequest'
            responses:
                "200":
                    $ref: '#/responses/CreateExternalDownloadResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: External download link
    /databases/{id}/lock:
        delete:
            description: Unlock database by id
            operationId: unlockDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Lock/unlock database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/LockDatabaseRequest'
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Unlock database
        post:
            description: Lock database by id...
            operationId: lockDatabaseById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Lock/unlock database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/LockDatabaseRequest'
            responses:
                "200":
                    $ref: '#/responses/Lock'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "409":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Lock database
    /databases/external/{uuid}:
        get:
            description: Download a given database without authentication
            operationId: externalDownloadDatabase
            parameters:
                - format: uint64
                  in: path
                  name: uuid
                  required: true
                  type: integer
                  x-go-name: UUID
            responses:
                "200":
                    $ref: '#/responses/DownloadDatabaseResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Externally download database
    /databases/save-as/{instanceId}:
        post:
            description: Save database under a new name
            operationId: saveAsDatabase
            parameters:
                - format: uint64
                  in: path
                  name: instanceId
                  required: true
                  type: integer
                  x-go-name: InstanceID
                - description: SaveAs database request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/saveAsRequest'
            responses:
                "201":
                    $ref: '#/responses/Database'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: '"Save as" database'
    /databases/save/{instanceId}:
        post:
            description: Saving a database won't affect the instances running the database. However, it should be noted that if two unlocked databases are deployed from the same database they can both overwrite it. It's up to the users to ensure this doesn't happen accidentally.
            operationId: saveDatabase
            parameters:
                - format: uint64
                  in: path
                  name: instanceId
                  required: true
                  type: integer
                  x-go-name: InstanceID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Save database
    /groups:
        get:
            description: Find all groups by user
            operationId: findAllGroupsByUser
            parameters:
                - description: deployable
                  in: query
                  name: deployable
                  type: string
                  x-go-name: Deployable
            responses:
                "200":
                    description: Group
                    schema:
                        items:
                            $ref: '#/definitions/Group'
                        type: array
                "401":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find all groups
        post:
            description: Create a group...
            operationId: groupCreate
            parameters:
                - description: Refresh token request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/CreateGroupRequest'
            responses:
                "201":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Create group
    /groups/{group}/cluster-configuration:
        post:
            description: |-
                Add a cluster configuration to a group. This will allow deploying to a remote cluster.
                Currently only configurations with embedded access tokens are support.
                The configuration needs to be encrypted using Mozilla Sops. Please see ./scripts/addClusterConfigToGroup.sh for an example of how this can be done.
            operationId: addClusterConfigurationToGroup
            parameters:
                - in: path
                  name: group
                  required: true
                  type: string
                  x-go-name: Group
                - description: SOPS encrypted Kubernetes configuration file
                  in: formData
                  name: Body
                  required: true
                  type: file
            responses:
                "201":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Add cluster configuration to group
    /groups/{group}/users/{userId}:
        post:
            description: Add a user to a group...
            operationId: addUserToGroup
            parameters:
                - in: path
                  name: group
                  required: true
                  type: string
                  x-go-name: Group
                - format: uint64
                  in: path
                  name: userId
                  required: true
                  type: integer
                  x-go-name: UserID
            responses:
                "201":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Add user to group
    /groups/{name}:
        get:
            description: Find a group by its name
            operationId: findGroupByName
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    description: Group
                    schema:
                        $ref: '#/definitions/Group'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find group
    /health:
        get:
            description: Show service health status
            operationId: health
            responses:
                "200":
                    $ref: '#/responses/Response'
            summary: Health status
    /instances:
        get:
            description: List all instances accessible by the user
            operationId: listInstances
            responses:
                "200":
                    $ref: '#/responses/GroupWithInstances'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: List instances
        post:
            description: Deploy an instance...
            operationId: deployInstance
            parameters:
                - description: Deploy instance request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema:
                    $ref: '#/definitions/DeployInstanceRequest'
                - description: preset
                  in: query
                  name: preset
                  type: string
                  x-go-name: Preset
            responses:
                "201":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Deploy instance
    /instances-name-to-id/{groupName}/{instanceName}:
        get:
            description: Find instance id by name and group name
            operationId: instanceNameToId
            parameters:
                - in: path
                  name: groupName
                  required: true
                  type: string
                  x-go-name: GroupName
                - in: path
                  name: instanceName
                  required: true
                  type: string
                  x-go-name: InstanceName
            responses:
                "200":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find an instance
    /instances/{id}:
        delete:
            description: Delete an instance by id
            operationId: deleteInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete instance
        get:
            description: Find an instance by id
            operationId: findById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find instance
        put:
            description: Update an instance...
            operationId: updateInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update instance request body parameter
                  in: body
                  name: Payload
                  required: true
                  schema:
                    $ref: '#/definitions/UpdateInstanceRequest'
            responses:
                "204":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update instance
    /instances/{id}/logs:
        get:
            description: Stream instance logs in real time
            operationId: instanceLogs
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: selector
                  in: query
                  name: selector
                  type: string
                  x-go-name: Selector
            responses:
                "200":
                    $ref: '#/responses/InstanceLogsResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Stream logs
    /instances/{id}/parameters:
        get:
            description: Find instance by id with decrypted parameters
            operationId: findByIdDecrypted
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: Instance
                    schema:
                        $ref: '#/definitions/Instance'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find decrypted instance
    /instances/{id}/pause:
        put:
            description: |-
                Pause an instance. Pause can be called multiple times even on an already paused instance
                (idempotent).
            operationId: pauseInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Pause instance
    /instances/{id}/reset:
        put:
            description: Resetting an instance will completely destroy it and redeploy using the same parameters
            operationId: resetInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "400":
                    $ref: '#/responses/Error'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Reset instance
    /instances/{id}/restart:
        put:
            description: Restart an instance...
            operationId: restartInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: selector
                  in: query
                  name: selector
                  type: string
                  x-go-name: Selector
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Restart instance
    /instances/{id}/resume:
        put:
            description: |-
                Resume a paused instance. Resume can be called multiple times even on an already running
                instance (idempotent).
            operationId: resumeInstance
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Resume paused instance
    /integrations:
        post:
            description: Return integration for a given key
            operationId: postIntegration
            parameters:
                - description: Integration request body
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/Request'
            responses:
                "200":
                    $ref: '#/responses/Response'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Integration
    /me:
        get:
            description: Current user details
            operationId: me
            responses:
                "200":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: User details
    /presets:
        get:
            description: List all presets accessible by the user
            operationId: listPresets
            responses:
                "200":
                    $ref: '#/responses/GroupWithInstances'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: List presets
    /refresh:
        post:
            description: Refresh user tokens
            operationId: refreshToken
            parameters:
                - description: Refresh token request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/RefreshTokenRequest'
            responses:
                "201":
                    $ref: '#/responses/Tokens'
                "400":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: Refresh tokens
    /stacks:
        get:
            description: Find all stacks...
            operationId: stacks
            responses:
                "200":
                    $ref: '#/responses/StacksResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find all stacks
    /stacks/{name}:
        get:
            description: Find stack by name
            operationId: stack
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
                  x-go-name: Name
            responses:
                "200":
                    $ref: '#/responses/StackResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find stack
    /tokens:
        post:
            description: Sign in... And get tokens
            operationId: signIn
            responses:
                "201":
                    $ref: '#/responses/Tokens'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - basicAuth: []
            summary: Sign in
    /users:
        delete:
            description: Sign out user... The authentication is done using oauth and JWT. A JWT can't easily be invalidated so even after calling this endpoint a user can still sign in assuming the JWT isn't expired. However, the token can't be refreshed using the refresh token supplied upon signin
            operationId: signOut
            responses:
                "200":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Sign out
        get:
            description: Find all users with the groups they belong to
            operationId: findAllUsers
            responses:
                "200":
                    $ref: '#/responses/UsersResponse'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find users
        post:
            description: Sign up a user. This endpoint is publicly accessible and therefor anyone can sign up. However, before being able to perform any actions, users needs to be a member of a group. And only administrators can add users to groups.
            operationId: signUp
            parameters:
                - description: SignUp request body parameter
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/signUpRequest'
            responses:
                "201":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "400":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            summary: SignUp user
    /users/{id}:
        delete:
            description: Delete user by id
            operationId: deleteUser
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "202":
                    description: ""
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Delete user
        get:
            description: Find a user by its id
            operationId: findUserById
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
            responses:
                "200":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Find user
        put:
            description: Update user's email and/or password
            operationId: updateUser
            parameters:
                - format: uint64
                  in: path
                  name: id
                  required: true
                  type: integer
                  x-go-name: ID
                - description: Update user request
                  in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/updateUserRequest'
            responses:
                "200":
                    description: User
                    schema:
                        $ref: '#/definitions/User'
                "401":
                    $ref: '#/responses/Error'
                "403":
                    $ref: '#/responses/Error'
                "404":
                    $ref: '#/responses/Error'
                "415":
                    $ref: '#/responses/Error'
            security:
                - oauth2: []
            summary: Update user
produces:
    - application/json
responses:
    CreateExternalDownloadResponse:
        description: ""
        schema:
            $ref: '#/definitions/ExternalDownload'
    Database:
        description: ""
        schema:
            $ref: '#/definitions/Database'
    DownloadDatabaseResponse:
        description: ""
        schema:
            items:
                format: uint8
                type: integer
            type: array
    Error:
        description: ""
    GroupWithInstances:
        description: ""
        schema:
            items:
                $ref: '#/definitions/GroupWithInstances'
            type: array
    InstanceLogsResponse:
        description: ""
    Lock:
        description: ""
        schema:
            $ref: '#/definitions/Lock'
    Response:
        description: ""
        schema:
            $ref: '#/definitions/Response'
    StackResponse:
        description: ""
        schema:
            $ref: '#/definitions/Stack'
    StacksResponse:
        description: ""
        schema:
            items:
                $ref: '#/definitions/Stack'
            type: array
    Tokens:
        description: ""
        schema:
            $ref: '#/definitions/Tokens'
    UsersResponse:
        description: ""
        schema:
            items:
                $ref: '#/definitions/User'
            type: array
securityDefinitions:
    oauth2:
        flow: password
        tokenUrl: /tokens
        type: oauth2
swagger: "2.0"
