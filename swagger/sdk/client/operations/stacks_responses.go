// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-manager/swagger/sdk/models"
)

// StacksReader is a Reader for the Stacks structure.
type StacksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StacksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStacksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewStacksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStacksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStacksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewStacksUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStacksOK creates a StacksOK with default headers values
func NewStacksOK() *StacksOK {
	return &StacksOK{}
}

/* StacksOK describes a response with status code 200, with default header values.

StacksOK stacks o k
*/
type StacksOK struct {
	Payload []*models.Stack
}

func (o *StacksOK) Error() string {
	return fmt.Sprintf("[GET /stacks][%d] stacksOK  %+v", 200, o.Payload)
}
func (o *StacksOK) GetPayload() []*models.Stack {
	return o.Payload
}

func (o *StacksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStacksUnauthorized creates a StacksUnauthorized with default headers values
func NewStacksUnauthorized() *StacksUnauthorized {
	return &StacksUnauthorized{}
}

/* StacksUnauthorized describes a response with status code 401, with default header values.

StacksUnauthorized stacks unauthorized
*/
type StacksUnauthorized struct {
}

func (o *StacksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /stacks][%d] stacksUnauthorized ", 401)
}

func (o *StacksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStacksForbidden creates a StacksForbidden with default headers values
func NewStacksForbidden() *StacksForbidden {
	return &StacksForbidden{}
}

/* StacksForbidden describes a response with status code 403, with default header values.

StacksForbidden stacks forbidden
*/
type StacksForbidden struct {
}

func (o *StacksForbidden) Error() string {
	return fmt.Sprintf("[GET /stacks][%d] stacksForbidden ", 403)
}

func (o *StacksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStacksNotFound creates a StacksNotFound with default headers values
func NewStacksNotFound() *StacksNotFound {
	return &StacksNotFound{}
}

/* StacksNotFound describes a response with status code 404, with default header values.

StacksNotFound stacks not found
*/
type StacksNotFound struct {
}

func (o *StacksNotFound) Error() string {
	return fmt.Sprintf("[GET /stacks][%d] stacksNotFound ", 404)
}

func (o *StacksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStacksUnsupportedMediaType creates a StacksUnsupportedMediaType with default headers values
func NewStacksUnsupportedMediaType() *StacksUnsupportedMediaType {
	return &StacksUnsupportedMediaType{}
}

/* StacksUnsupportedMediaType describes a response with status code 415, with default header values.

StacksUnsupportedMediaType stacks unsupported media type
*/
type StacksUnsupportedMediaType struct {
}

func (o *StacksUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /stacks][%d] stacksUnsupportedMediaType ", 415)
}

func (o *StacksUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
