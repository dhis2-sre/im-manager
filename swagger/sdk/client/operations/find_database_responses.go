// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-manager/swagger/sdk/models"
)

// FindDatabaseReader is a Reader for the FindDatabase structure.
type FindDatabaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindDatabaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindDatabaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFindDatabaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFindDatabaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindDatabaseForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindDatabaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewFindDatabaseUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFindDatabaseOK creates a FindDatabaseOK with default headers values
func NewFindDatabaseOK() *FindDatabaseOK {
	return &FindDatabaseOK{}
}

/*
FindDatabaseOK describes a response with status code 200, with default header values.

FindDatabaseOK find database o k
*/
type FindDatabaseOK struct {
	Payload *models.Database
}

// IsSuccess returns true when this find database o k response has a 2xx status code
func (o *FindDatabaseOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find database o k response has a 3xx status code
func (o *FindDatabaseOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find database o k response has a 4xx status code
func (o *FindDatabaseOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find database o k response has a 5xx status code
func (o *FindDatabaseOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find database o k response a status code equal to that given
func (o *FindDatabaseOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the find database o k response
func (o *FindDatabaseOK) Code() int {
	return 200
}

func (o *FindDatabaseOK) Error() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseOK  %+v", 200, o.Payload)
}

func (o *FindDatabaseOK) String() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseOK  %+v", 200, o.Payload)
}

func (o *FindDatabaseOK) GetPayload() *models.Database {
	return o.Payload
}

func (o *FindDatabaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Database)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindDatabaseBadRequest creates a FindDatabaseBadRequest with default headers values
func NewFindDatabaseBadRequest() *FindDatabaseBadRequest {
	return &FindDatabaseBadRequest{}
}

/*
FindDatabaseBadRequest describes a response with status code 400, with default header values.

FindDatabaseBadRequest find database bad request
*/
type FindDatabaseBadRequest struct {
}

// IsSuccess returns true when this find database bad request response has a 2xx status code
func (o *FindDatabaseBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find database bad request response has a 3xx status code
func (o *FindDatabaseBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find database bad request response has a 4xx status code
func (o *FindDatabaseBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this find database bad request response has a 5xx status code
func (o *FindDatabaseBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this find database bad request response a status code equal to that given
func (o *FindDatabaseBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the find database bad request response
func (o *FindDatabaseBadRequest) Code() int {
	return 400
}

func (o *FindDatabaseBadRequest) Error() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseBadRequest ", 400)
}

func (o *FindDatabaseBadRequest) String() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseBadRequest ", 400)
}

func (o *FindDatabaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseUnauthorized creates a FindDatabaseUnauthorized with default headers values
func NewFindDatabaseUnauthorized() *FindDatabaseUnauthorized {
	return &FindDatabaseUnauthorized{}
}

/*
FindDatabaseUnauthorized describes a response with status code 401, with default header values.

FindDatabaseUnauthorized find database unauthorized
*/
type FindDatabaseUnauthorized struct {
}

// IsSuccess returns true when this find database unauthorized response has a 2xx status code
func (o *FindDatabaseUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find database unauthorized response has a 3xx status code
func (o *FindDatabaseUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find database unauthorized response has a 4xx status code
func (o *FindDatabaseUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this find database unauthorized response has a 5xx status code
func (o *FindDatabaseUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this find database unauthorized response a status code equal to that given
func (o *FindDatabaseUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the find database unauthorized response
func (o *FindDatabaseUnauthorized) Code() int {
	return 401
}

func (o *FindDatabaseUnauthorized) Error() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseUnauthorized ", 401)
}

func (o *FindDatabaseUnauthorized) String() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseUnauthorized ", 401)
}

func (o *FindDatabaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseForbidden creates a FindDatabaseForbidden with default headers values
func NewFindDatabaseForbidden() *FindDatabaseForbidden {
	return &FindDatabaseForbidden{}
}

/*
FindDatabaseForbidden describes a response with status code 403, with default header values.

FindDatabaseForbidden find database forbidden
*/
type FindDatabaseForbidden struct {
}

// IsSuccess returns true when this find database forbidden response has a 2xx status code
func (o *FindDatabaseForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find database forbidden response has a 3xx status code
func (o *FindDatabaseForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find database forbidden response has a 4xx status code
func (o *FindDatabaseForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this find database forbidden response has a 5xx status code
func (o *FindDatabaseForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this find database forbidden response a status code equal to that given
func (o *FindDatabaseForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the find database forbidden response
func (o *FindDatabaseForbidden) Code() int {
	return 403
}

func (o *FindDatabaseForbidden) Error() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseForbidden ", 403)
}

func (o *FindDatabaseForbidden) String() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseForbidden ", 403)
}

func (o *FindDatabaseForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseNotFound creates a FindDatabaseNotFound with default headers values
func NewFindDatabaseNotFound() *FindDatabaseNotFound {
	return &FindDatabaseNotFound{}
}

/*
FindDatabaseNotFound describes a response with status code 404, with default header values.

FindDatabaseNotFound find database not found
*/
type FindDatabaseNotFound struct {
}

// IsSuccess returns true when this find database not found response has a 2xx status code
func (o *FindDatabaseNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find database not found response has a 3xx status code
func (o *FindDatabaseNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find database not found response has a 4xx status code
func (o *FindDatabaseNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this find database not found response has a 5xx status code
func (o *FindDatabaseNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this find database not found response a status code equal to that given
func (o *FindDatabaseNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the find database not found response
func (o *FindDatabaseNotFound) Code() int {
	return 404
}

func (o *FindDatabaseNotFound) Error() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseNotFound ", 404)
}

func (o *FindDatabaseNotFound) String() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseNotFound ", 404)
}

func (o *FindDatabaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindDatabaseUnsupportedMediaType creates a FindDatabaseUnsupportedMediaType with default headers values
func NewFindDatabaseUnsupportedMediaType() *FindDatabaseUnsupportedMediaType {
	return &FindDatabaseUnsupportedMediaType{}
}

/*
FindDatabaseUnsupportedMediaType describes a response with status code 415, with default header values.

FindDatabaseUnsupportedMediaType find database unsupported media type
*/
type FindDatabaseUnsupportedMediaType struct {
}

// IsSuccess returns true when this find database unsupported media type response has a 2xx status code
func (o *FindDatabaseUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find database unsupported media type response has a 3xx status code
func (o *FindDatabaseUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find database unsupported media type response has a 4xx status code
func (o *FindDatabaseUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this find database unsupported media type response has a 5xx status code
func (o *FindDatabaseUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this find database unsupported media type response a status code equal to that given
func (o *FindDatabaseUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

// Code gets the status code for the find database unsupported media type response
func (o *FindDatabaseUnsupportedMediaType) Code() int {
	return 415
}

func (o *FindDatabaseUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseUnsupportedMediaType ", 415)
}

func (o *FindDatabaseUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /databases/{id}][%d] findDatabaseUnsupportedMediaType ", 415)
}

func (o *FindDatabaseUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
