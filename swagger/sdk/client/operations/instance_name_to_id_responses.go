// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/dhis2-sre/im-manager/swagger/sdk/models"
)

// InstanceNameToIDReader is a Reader for the InstanceNameToID structure.
type InstanceNameToIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InstanceNameToIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInstanceNameToIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewInstanceNameToIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInstanceNameToIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInstanceNameToIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewInstanceNameToIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInstanceNameToIDOK creates a InstanceNameToIDOK with default headers values
func NewInstanceNameToIDOK() *InstanceNameToIDOK {
	return &InstanceNameToIDOK{}
}

/* InstanceNameToIDOK describes a response with status code 200, with default header values.

Instance
*/
type InstanceNameToIDOK struct {
	Payload *models.Instance
}

func (o *InstanceNameToIDOK) Error() string {
	return fmt.Sprintf("[GET /instances-name-to-id/{groupName}/{instanceName}][%d] instanceNameToIdOK  %+v", 200, o.Payload)
}
func (o *InstanceNameToIDOK) GetPayload() *models.Instance {
	return o.Payload
}

func (o *InstanceNameToIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Instance)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInstanceNameToIDUnauthorized creates a InstanceNameToIDUnauthorized with default headers values
func NewInstanceNameToIDUnauthorized() *InstanceNameToIDUnauthorized {
	return &InstanceNameToIDUnauthorized{}
}

/* InstanceNameToIDUnauthorized describes a response with status code 401, with default header values.

InstanceNameToIDUnauthorized instance name to Id unauthorized
*/
type InstanceNameToIDUnauthorized struct {
}

func (o *InstanceNameToIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instances-name-to-id/{groupName}/{instanceName}][%d] instanceNameToIdUnauthorized ", 401)
}

func (o *InstanceNameToIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstanceNameToIDForbidden creates a InstanceNameToIDForbidden with default headers values
func NewInstanceNameToIDForbidden() *InstanceNameToIDForbidden {
	return &InstanceNameToIDForbidden{}
}

/* InstanceNameToIDForbidden describes a response with status code 403, with default header values.

InstanceNameToIDForbidden instance name to Id forbidden
*/
type InstanceNameToIDForbidden struct {
}

func (o *InstanceNameToIDForbidden) Error() string {
	return fmt.Sprintf("[GET /instances-name-to-id/{groupName}/{instanceName}][%d] instanceNameToIdForbidden ", 403)
}

func (o *InstanceNameToIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstanceNameToIDNotFound creates a InstanceNameToIDNotFound with default headers values
func NewInstanceNameToIDNotFound() *InstanceNameToIDNotFound {
	return &InstanceNameToIDNotFound{}
}

/* InstanceNameToIDNotFound describes a response with status code 404, with default header values.

InstanceNameToIDNotFound instance name to Id not found
*/
type InstanceNameToIDNotFound struct {
}

func (o *InstanceNameToIDNotFound) Error() string {
	return fmt.Sprintf("[GET /instances-name-to-id/{groupName}/{instanceName}][%d] instanceNameToIdNotFound ", 404)
}

func (o *InstanceNameToIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInstanceNameToIDUnsupportedMediaType creates a InstanceNameToIDUnsupportedMediaType with default headers values
func NewInstanceNameToIDUnsupportedMediaType() *InstanceNameToIDUnsupportedMediaType {
	return &InstanceNameToIDUnsupportedMediaType{}
}

/* InstanceNameToIDUnsupportedMediaType describes a response with status code 415, with default header values.

InstanceNameToIDUnsupportedMediaType instance name to Id unsupported media type
*/
type InstanceNameToIDUnsupportedMediaType struct {
}

func (o *InstanceNameToIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /instances-name-to-id/{groupName}/{instanceName}][%d] instanceNameToIdUnsupportedMediaType ", 415)
}

func (o *InstanceNameToIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
