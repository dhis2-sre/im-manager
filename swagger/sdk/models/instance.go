// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Instance instance
//
// swagger:model Instance
type Instance struct {

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"CreatedAt,omitempty"`

	// deleted at
	DeletedAt *DeletedAt `json:"DeletedAt,omitempty"`

	// deploy log
	DeployLog string `json:"DeployLog,omitempty"`

	// group name
	GroupName string `json:"GroupName,omitempty"`

	// ID
	ID uint64 `json:"ID,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// optional parameters
	OptionalParameters []*InstanceOptionalParameter `json:"optionalParameters"`

	// required parameters
	RequiredParameters []*InstanceRequiredParameter `json:"requiredParameters"`

	// stack name
	StackName string `json:"StackName,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"UpdatedAt,omitempty"`

	// user ID
	UserID uint64 `json:"UserID,omitempty"`
}

// Validate validates this instance
func (m *Instance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeletedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Instance) validateDeletedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.DeletedAt) { // not required
		return nil
	}

	if m.DeletedAt != nil {
		if err := m.DeletedAt.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeletedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DeletedAt")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) validateOptionalParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionalParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.OptionalParameters); i++ {
		if swag.IsZero(m.OptionalParameters[i]) { // not required
			continue
		}

		if m.OptionalParameters[i] != nil {
			if err := m.OptionalParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionalParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optionalParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) validateRequiredParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredParameters) { // not required
		return nil
	}

	for i := 0; i < len(m.RequiredParameters); i++ {
		if swag.IsZero(m.RequiredParameters[i]) { // not required
			continue
		}

		if m.RequiredParameters[i] != nil {
			if err := m.RequiredParameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requiredParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requiredParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("UpdatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this instance based on the context it is used
func (m *Instance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeletedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptionalParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Instance) contextValidateDeletedAt(ctx context.Context, formats strfmt.Registry) error {

	if m.DeletedAt != nil {
		if err := m.DeletedAt.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeletedAt")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DeletedAt")
			}
			return err
		}
	}

	return nil
}

func (m *Instance) contextValidateOptionalParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OptionalParameters); i++ {

		if m.OptionalParameters[i] != nil {
			if err := m.OptionalParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionalParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optionalParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Instance) contextValidateRequiredParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequiredParameters); i++ {

		if m.RequiredParameters[i] != nil {
			if err := m.RequiredParameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requiredParameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requiredParameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Instance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Instance) UnmarshalBinary(b []byte) error {
	var res Instance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
