# consumedParameters: DATABASE_ID, DATABASE_USERNAME, DATABASE_PASSWORD, DATABASE_NAME, DATABASE_HOSTNAME
# hostnameVariable: DATABASE_HOSTNAME
# stackParameters: GOOGLE_AUTH_PROJECT_ID,GOOGLE_AUTH_PRIVATE_KEY_ID,GOOGLE_AUTH_PRIVATE_KEY,GOOGLE_AUTH_CLIENT_EMAIL,GOOGLE_AUTH_CLIENT_ID
helmDefaults:
  deleteWait: true

releases:
  - name: "{{ requiredEnv "INSTANCE_NAME" }}"
    namespace: "{{ requiredEnv "INSTANCE_NAMESPACE" }}"
    chart: dhis2/core
    version: "{{ requiredEnv "CHART_VERSION" }}"
    values:
      - image:
          repository: dhis2/{{ requiredEnv "IMAGE_REPOSITORY" }}
          tag: "{{ requiredEnv "IMAGE_TAG" }}"
          pullPolicy: {{ requiredEnv "IMAGE_PULL_POLICY" }}
      - ingress:
          enabled: true
          hostname: {{ requiredEnv "INSTANCE_HOSTNAME" }}
          path: /{{ requiredEnv "INSTANCE_NAME" }}
          certIssuer: cert-issuer-prod
          annotations:
            nginx.ingress.kubernetes.io/proxy-body-size: 128m
      - dhis2Home: "{{ requiredEnv "DHIS2_HOME" }}"
      - catalinaOpts: "-Dcontext.path=/{{ requiredEnv "INSTANCE_NAME" }} -Dcontext.sameSiteCookies={{ requiredEnv "SAME_SITE_COOKIES" }}"
      - contextPath: /{{ requiredEnv "INSTANCE_NAME" }}
      - javaOpts: "{{ requiredEnv "JAVA_OPTS" }}"
      - minReadySeconds: {{ requiredEnv "MIN_READY_SECONDS" }}
      - startupProbe:
          failureThreshold: {{ requiredEnv "STARTUP_PROBE_FAILURE_THRESHOLD" }}
          periodSeconds: {{ requiredEnv "STARTUP_PROBE_PERIOD_SECONDS" }}
          path: /{{ requiredEnv "INSTANCE_NAME" }}
      - livenessProbe:
          timeoutSeconds: {{ requiredEnv "LIVENESS_PROBE_TIMEOUT_SECONDS" }}
          path: /{{ requiredEnv "INSTANCE_NAME" }}
      - readinessProbe:
          timeoutSeconds: {{ requiredEnv "READINESS_PROBE_TIMEOUT_SECONDS" }}
          path: /{{ requiredEnv "INSTANCE_NAME" }}
      - commonLabels:
          im: "true"
          im-default: "true"
          im-deployment-id: "{{ requiredEnv "DEPLOYMENT_ID" }}"
          im-instance-id: "{{ requiredEnv "INSTANCE_ID" }}"
          im-id: "{{ requiredEnv "INSTANCE_ID" }}"
          im-type: "dhis2"
          im-creation-timestamp: "{{ requiredEnv "INSTANCE_CREATION_TIMESTAMP" }}"
          im-ttl: "{{ requiredEnv "INSTANCE_TTL" }}"

      {{- if eq (requiredEnv "STORAGE_TYPE") "filesystem" }}
      - storage:
          volumeSize: {{ requiredEnv "FILESYSTEM_VOLUME_SIZE" }}
      {{- end }}

      {{- if eq (requiredEnv "STORAGE_TYPE") "minio" }}
      - minIO:
          provider: s3
          container: dhis2
          endpoint: http://{{ requiredEnv "INSTANCE_NAME" }}-minio.{{ requiredEnv "INSTANCE_NAMESPACE" }}.svc:9000
          location: eu-west-1
          identity: dhisdhis
          secret: dhisdhis
      {{- end }}

      {{- if eq (requiredEnv "STORAGE_TYPE") "s3" }}
      - S3:
          provider: aws-s3
          container: {{ requiredEnv "S3_BUCKET" }}
          location: {{ requiredEnv "S3_REGION" }}
          identity: {{ requiredEnv "S3_IDENTITY" }}
          secret: {{ requiredEnv "S3_SECRET" }}
      {{- end }}

      - database:
          username: {{ requiredEnv "DATABASE_USERNAME" }}
          password: {{ requiredEnv "DATABASE_PASSWORD" }}
          database: {{ requiredEnv "DATABASE_NAME" }}
          hostname: {{ requiredEnv "DATABASE_HOSTNAME" }}

      {{- if ne (requiredEnv "CUSTOM_DHIS2_CONFIG") "" }}
      - customConfigSnippet:
          {{- requiredEnv "CUSTOM_DHIS2_CONFIG" | nindent 10 }}
      {{- end }}

      - sessionCookieSameSite: {{ requiredEnv "SAME_SITE_COOKIES" }}

      - flyway:
          migrateOutOfOrder: {{ requiredEnv "FLYWAY_MIGRATE_OUT_OF_ORDER" }}
          repairBeforeMigration: {{ requiredEnv "FLYWAY_REPAIR_BEFORE_MIGRATION" }}

      - enableQueryLogging: {{ requiredEnv "ENABLE_QUERY_LOGGING" }}

      - googleAuth:
          projectId: "{{ requiredEnv "GOOGLE_AUTH_PROJECT_ID" }}"
          privateKeyId: "{{ requiredEnv "GOOGLE_AUTH_PRIVATE_KEY_ID" }}"
          privateKey: '{{ requiredEnv "GOOGLE_AUTH_PRIVATE_KEY" }}'
          clientEmail: "{{ requiredEnv "GOOGLE_AUTH_CLIENT_EMAIL" }}"
          clientId: "{{ requiredEnv "GOOGLE_AUTH_CLIENT_ID" }}"
      - resources:
          requests:
            cpu: {{ requiredEnv "RESOURCES_REQUESTS_CPU" }}
            memory: {{ requiredEnv "RESOURCES_REQUESTS_MEMORY" }}
      - keda:
          enabled: {{ requiredEnv "ALLOW_SUSPEND" }}

  {{- if eq (requiredEnv "STORAGE_TYPE") "minio" }}
  - name: "{{ requiredEnv "INSTANCE_NAME" }}-minio"
    namespace: "{{ requiredEnv "INSTANCE_NAMESPACE" }}"
    chart: bitnami/minio
    version: "{{ requiredEnv "MINIO_CHART_VERSION" }}"
    values:
      - persistence:
          size: {{ requiredEnv "MINIO_STORAGE_SIZE" }}
        annotations:
          helm.sh/resource-policy: keep
      - auth:
          rootUser: dhisdhis
          rootPassword: dhisdhis
          forcePassword: true
      - defaultBuckets: dhis2
      - image:
          repository: bitnamilegacy/minio
      - sidecars:
          - name: "{{ requiredEnv "INSTANCE_NAME" }}-minio-seed"
            # Should match the version used by the main container
            image: bitnamilegacy/minio:2025.1.20-debian-12-r0
            pullPolicy: {{ requiredEnv "IMAGE_PULL_POLICY" }}
            env:
              - name: HOSTNAME
                value: {{ requiredEnv "HOSTNAME" }}
              - name: DATABASE_ID
                value: "{{ requiredEnv "DATABASE_ID" }}"
              - name: IM_ACCESS_TOKEN
                value: {{ requiredEnv "IM_ACCESS_TOKEN" }}
            command:
              - "/bin/bash"
              - "-c"
              - |
                  mc alias set myminio http://{{ requiredEnv "INSTANCE_NAME" }}-minio:9000 dhisdhis dhisdhis

                  seed_file=myminio/dhis2/seeded.txt
                  if mc stat $seed_file >/dev/null 2>&1; then
                    echo "Already seeded, skipping..."
                  else
                    # Wait for MinIO to be ready, accounting for restart with consecutive checks
                    timeout=120
                    elapsed=0
                    success_count=0
                    required_successes=3

                    while [ "$success_count" -lt "$required_successes" ]; do
                      if curl --silent --fail http://{{ requiredEnv "INSTANCE_NAME" }}-minio:9000/minio/health/ready; then
                        success_count=$((success_count + 1))
                        echo "MinIO health check $success_count/$required_successes passed"
                      else
                        success_count=0
                        echo "MinIO health check failed, resetting counter"
                      fi
                      sleep 2
                      elapsed=$((elapsed + 2))
                      if [ "$elapsed" -ge "$timeout" ]; then
                        echo "Timeout reached: MinIO is not ready after $timeout seconds."
                        exit 1
                      fi
                    done

                    echo "MinIO is stable and ready!!!"

                    DATABASE_URL="$HOSTNAME/databases/$DATABASE_ID"
                    echo "DATABASE_URL: $DATABASE_URL"
                    FILESTORE_ID=$(curl --connect-timeout 10 --retry 5 --retry-delay 1 --fail -L $DATABASE_URL --cookie "accessToken=$IM_ACCESS_TOKEN" | jq -r '.filestoreId')
                    if [[ "$FILESTORE_ID" == "0" ]]; then
                      echo "No filestore id associated with database"
                    else
                    echo "Filestore ID: $FILESTORE_ID"
                    echo "Seeding..."

                    tmp_file=$(mktemp)
                    trap 'rm -f "$tmp_file"' EXIT  # Ensures cleanup on script exit
                    FILESTORE_DOWNLOAD_URL="$HOSTNAME/databases/$FILESTORE_ID/download"
                    curl --connect-timeout 10 --retry 5 --retry-delay 1 --fail -L "$FILESTORE_DOWNLOAD_URL" --cookie "accessToken=$IM_ACCESS_TOKEN" > "$tmp_file"

                    tmp_dir=$(mktemp -d /tmp/minio.XXXXXX)
                    trap 'rm -rf "$tmp_dir"' EXIT  # Ensures cleanup on script exit
                    gunzip -c "$tmp_file" | tar xf - -C "$tmp_dir"
                    chmod -R u+rwx,go+rx "$tmp_dir"

                    mc cp --recursive "$tmp_dir"/* myminio/dhis2

                    echo "Seeded from $FILESTORE_DOWNLOAD_URL" | mc pipe $seed_file

                    # Clean up            
                    rm -f "$tmp_file"
                    rm -rf "$tmp_dir"

                    echo "Done seeding!"
                  fi
                fi

                # Wait forever
                tail -f /dev/null
  {{- end }}

repositories:
  - name: dhis2
    url: https://dhis2-sre.github.io/dhis2-core-chart
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
