helmDefaults:
  deleteWait: true

releases:
  - name: "{{ requiredEnv "INSTANCE_NAME" }}-minio"
    namespace: "{{ requiredEnv "INSTANCE_NAMESPACE" }}"
    chart: bitnami/minio
    version: "{{ requiredEnv "MINIO_CHART_VERSION" }}"
    values:
      - persistence:
          size: {{ requiredEnv "MINIO_STORAGE_SIZE" }}
        annotations:
          helm.sh/resource-policy: keep
      - auth:
          rootUser: dhisdhis
          rootPassword: dhisdhis
          forcePassword: true
      - defaultBuckets: dhis2
      - image:
          repository: bitnamilegacy/minio
      - sidecars:
          - name: "{{ requiredEnv "INSTANCE_NAME" }}-minio-seed"
            # Should match the version used by the main container
            image: bitnamilegacy/minio:2025.1.20-debian-12-r0
            pullPolicy: {{ requiredEnv "IMAGE_PULL_POLICY" }}
            env:
              - name: HOSTNAME
                value: {{ requiredEnv "HOSTNAME" }}
              - name: DATABASE_ID
                value: "{{ requiredEnv "DATABASE_ID" }}"
              - name: IM_ACCESS_TOKEN
                value: {{ requiredEnv "IM_ACCESS_TOKEN" }}
            command:
              - "/bin/bash"
              - "-c"
              - |
                # Wait for MinIO to be ready
                timeout=20
                elapsed=0
                
                until curl --silent --fail http://{{ requiredEnv "INSTANCE_NAME" }}-minio:9000/minio/health/ready; do
                  echo "Waiting for MinIO to be ready..."
                  sleep 2
                  elapsed=$((elapsed + 2))
                  if [ "$elapsed" -ge "$timeout" ]; then
                    echo "Timeout reached: MinIO is not ready after $timeout seconds."
                    exit 1
                  fi
                done
                echo "MinIO is ready!!!"

                mc alias set myminio http://{{ requiredEnv "INSTANCE_NAME" }}-minio:9000 dhisdhis dhisdhis

                seed_file=myminio/dhis2/seeded.txt
                if mc stat $seed_file >/dev/null 2>&1; then
                  echo "Already seeded, skipping..."
                else
                  DATABASE_URL="$HOSTNAME/databases/$DATABASE_ID"
                  echo "DATABASE_URL: $DATABASE_URL"
                  FILESTORE_ID=$(curl --connect-timeout 10 --retry 5 --retry-delay 1 --fail -L $DATABASE_URL --cookie "accessToken=$IM_ACCESS_TOKEN" | jq -r '.filestoreId')
                  if [[ "$FILESTORE_ID" == "0" ]]; then
                    echo "No filestore id associated with database"
                  else
                    echo "Filestore ID: $FILESTORE_ID"
                    echo "Seeding..."

                    tmp_file=$(mktemp)
                    trap 'rm -f "$tmp_file"' EXIT  # Ensures cleanup on script exit
                    FILESTORE_DOWNLOAD_URL="$HOSTNAME/databases/$FILESTORE_ID/download"
                    curl --connect-timeout 10 --retry 5 --retry-delay 1 --fail -L "$FILESTORE_DOWNLOAD_URL" --cookie "accessToken=$IM_ACCESS_TOKEN" > "$tmp_file"

                    tmp_dir=$(mktemp -d /tmp/minio.XXXXXX)
                    trap 'rm -rf "$tmp_dir"' EXIT  # Ensures cleanup on script exit
                    gunzip -c "$tmp_file" | tar xf - -C "$tmp_dir"
                    chmod -R u+rwx,go+rx "$tmp_dir"

                    mc cp --recursive "$tmp_dir"/* myminio/dhis2

                    echo "Seeded from $FILESTORE_DOWNLOAD_URL" | mc pipe $seed_file

                    # Clean up            
                    rm -f "$tmp_file"
                    rm -rf "$tmp_dir"

                    echo "Done seeding!"
                  fi
                fi

                # Wait forever
                tail -f /dev/null

repositories:
  - name: bitnami
    url: https://charts.bitnami.com/bitnami
